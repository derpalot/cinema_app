/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // Apply the jacoco plugin for testing
    id 'jacoco'

    //Apply the JavaFX plugin for Graphical User Interface
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

javafx {
    version = '12.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation 'com.opencsv:opencsv:4.4'
}

application {
    // Define the main class for the application.
    mainClassName = 'Cinema.Main'
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled = true
        csv.enabled = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['Cinema/Controller/**','Cinema/CinemaApp.class'])
        }))
    }
}

jar {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Implementation-Title': 'Fancy Cinema Jar',
        'Main-Class': 'Cinema.Main'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
    finalizedBy jacocoTestReport
}
